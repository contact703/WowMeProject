'use client'

import { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { createClient } from '@/lib/supabase/client'
import Link from 'next/link'
import { getLanguageFlag, getLanguageName } from '@/lib/flags'

export default function ReceivedStoryPage() {
  const params = useParams()
  const router = useRouter()
  const [story, setStory] = useState<any>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    loadStory()
  }, [])

  const loadStory = async () => {
    try {
      const supabase = createClient()
      
      // Get received story
      const { data: receivedData, error: receivedError } = await supabase
        .from('user_received_stories')
        .select('*')
        .eq('id', params.id)
        .single()

      if (receivedError || !receivedData) {
        console.error('Error loading received story:', receivedError)
        router.push('/profile')
        return
      }

      // Get suggested story details
      const { data: suggestedStory, error: suggestedError } = await supabase
        .from('suggested_stories')
        .select('rewritten_text, target_language, created_at, metadata')
        .eq('id', receivedData.suggested_story_id)
        .single()

      if (suggestedError || !suggestedStory) {
        console.error('Error loading suggested story:', suggestedError)
        router.push('/profile')
        return
      }

      setStory({
        ...receivedData,
        suggested_story: suggestedStory
      })

      // Mark as read
      await supabase
        .from('user_received_stories')
        .update({ is_read: true })
        .eq('id', params.id)

      setLoading(false)
    } catch (error) {
      console.error('Error in loadStory:', error)
      router.push('/profile')
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-900 to-black flex items-center justify-center">
        <div className="text-white text-xl">Loading...</div>
      </div>
    )
  }

  if (!story) {
    return null
  }

  const isAIGenerated = story.suggested_story?.metadata?.ai_generated

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-900 to-black text-white p-8">
      <div className="max-w-3xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <Link
            href="/profile"
            className="text-white/70 hover:text-white transition mb-4 inline-block"
          >
            ‚Üê Back to Profile
          </Link>
          <h1 className="text-4xl font-bold mb-2">üíú You're Not Alone</h1>
          <p className="text-white/70">
            {isAIGenerated
              ? 'Our AI generated this story based on your experience to show you that others share similar feelings.'
              : 'Someone else shared a similar experience. You are not alone in this journey.'}
          </p>
        </div>

        {/* Story Card */}
        <div className="bg-white/10 backdrop-blur-md rounded-2xl p-8 shadow-2xl">
          <div className="flex items-center gap-2 mb-6">
            <div className="w-12 h-12 rounded-full bg-gradient-to-r from-red-500 to-red-500 flex items-center justify-center text-2xl">
              {isAIGenerated ? 'ü§ñ' : 'üë§'}
            </div>
            <div>
              <div className="font-medium">
                {isAIGenerated ? 'AI-Generated Story' : 'Anonymous'}
              </div>
              <div className="text-sm text-white/60">
                {new Date(story.suggested_story.created_at).toLocaleDateString()}
              </div>
            </div>
          </div>

          <div className="prose prose-invert max-w-none">
            <p className="text-lg leading-relaxed whitespace-pre-wrap">
              {story.suggested_story.rewritten_text}
            </p>
          </div>

          {/* Language Flag */}
          <div className="mt-4 flex items-center gap-2 text-white/60">
            <span className="text-2xl">{getLanguageFlag(story.suggested_story.target_language)}</span>
            <span className="text-sm">{getLanguageName(story.suggested_story.target_language)}</span>
          </div>

          {isAIGenerated && (
            <div className="mt-6 p-4 bg-red-500/20 rounded-lg border border-red-500/30">
              <p className="text-sm text-white/80">
                üí° <strong>Note:</strong> This story was generated by AI to provide comfort and show that your feelings are valid and shared by many. As more people join WowMe, you'll receive real stories from others who've had similar experiences.
              </p>
            </div>
          )}
        </div>

        {/* Actions */}
        <div className="mt-8 flex gap-4 justify-center">
          <Link
            href="/submit"
            className="bg-gradient-to-r from-red-500 to-red-500 px-6 py-3 rounded-lg font-medium hover:opacity-90 transition"
          >
            ‚ú® Share Another Story
          </Link>
          <Link
            href="/profile"
            className="bg-white/10 px-6 py-3 rounded-lg font-medium hover:bg-white/20 transition"
          >
            View All Received Stories
          </Link>
        </div>
      </div>
    </div>
  )
}
